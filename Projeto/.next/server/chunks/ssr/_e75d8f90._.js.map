{
  "version": 3,
  "sources": [],
  "sections": [
    {"offset": {"line": 6, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"","debugId":null}},
    {"offset": {"line": 24, "column": 0}, "map": {"version":3,"sources":["file://C%3A/Users/BRAYAN/Documents/ProjetoMoovieApp/Projeto/src/app/filme/%5Bid%5D/page.tsx"],"sourcesContent":["import { notFound } from 'next/navigation';\r\n\r\ninterface MovieDetails {\r\n  title: string;\r\n  overview: string;\r\n  poster_path: string;\r\n  release_date: string;\r\n  vote_average: number;\r\n  genres: { id: number; name: string }[];\r\n}\r\n\r\ninterface VideoResult {\r\n  results: { key: string; type: string; site: string }[];\r\n}\r\n\r\ninterface CastMember {\r\n  id: number;\r\n  name: string;\r\n  character: string;\r\n  profile_path: string | null;\r\n}\r\n\r\nasync function getMovieDetails(id: string): Promise<MovieDetails | null> {\r\n  const API_KEY = 'd29e79bb675e164fc1f28decd659e21c';\r\n  const res = await fetch(`https://api.themoviedb.org/3/movie/${id}?api_key=${API_KEY}&language=pt-BR`);\r\n  if (!res.ok) return null;\r\n  return res.json();\r\n}\r\n\r\nasync function getMovieVideo(id: string): Promise<string | null> {\r\n  const API_KEY = 'd29e79bb675e164fc1f28decd659e21c';\r\n  const res = await fetch(`https://api.themoviedb.org/3/movie/${id}/videos?api_key=${API_KEY}&language=pt-BR`);\r\n  if (!res.ok) return null;\r\n  const data: VideoResult = await res.json();\r\n  const trailer = data.results.find(v => v.type === 'Trailer' && v.site === 'YouTube');\r\n  return trailer ? trailer.key : null;\r\n}\r\n\r\nasync function getMovieCast(id: string): Promise<CastMember[]> {\r\n  const API_KEY = 'd29e79bb675e164fc1f28decd659e21c';\r\n  const res = await fetch(`https://api.themoviedb.org/3/movie/${id}/credits?api_key=${API_KEY}&language=pt-BR`);\r\n  if (!res.ok) return [];\r\n  const data = await res.json();\r\n  return data.cast.slice(0, 8); // mostra os 8 principais\r\n}\r\n\r\nexport default async function MoviePage({ params }: { params: { id: string } }) {\r\n  const movie = await getMovieDetails(params.id);\r\n  const trailerKey = await getMovieVideo(params.id);\r\n  const cast = await getMovieCast(params.id);\r\n\r\n  if (!movie) return notFound();\r\n\r\n  return (\r\n    <div className=\"min-h-screen bg-gradient-to-b from-slate-900 via-slate-950 to-black p-8 flex flex-col items-center\">\r\n      <h1 className=\"text-5xl font-extrabold text-center text-slate-100 mb-10 drop-shadow-lg\">\r\n        {movie.title}\r\n      </h1>\r\n\r\n      <div className=\"flex flex-col md:flex-row bg-white/5 backdrop-blur-lg rounded-2xl shadow-2xl overflow-hidden w-full max-w-6xl\">\r\n        <img\r\n          src={`https://image.tmdb.org/t/p/w500${movie.poster_path}`}\r\n          alt={movie.title}\r\n          className=\"w-full md:w-1/3 object-cover hover:scale-105 transition-transform duration-500 ease-in-out\"\r\n        />\r\n\r\n        <div className=\"p-8 text-slate-100 space-y-4 flex-1\">\r\n          <div className=\"flex flex-wrap gap-4 text-sm text-slate-300\">\r\n            <span className=\"bg-slate-800 px-3 py-1 rounded-full\">{movie.release_date}</span>\r\n            <span className=\"bg-slate-800 px-3 py-1 rounded-full\">Nota: {movie.vote_average}</span>\r\n          </div>\r\n\r\n          <div className=\"flex flex-wrap gap-2\">\r\n            {movie.genres.map(g => (\r\n              <span key={g.id} className=\"bg-slate-700 px-3 py-1 text-xs rounded-full\">\r\n                {g.name}\r\n              </span>\r\n            ))}\r\n          </div>\r\n\r\n          <div>\r\n            <h2 className=\"text-2xl font-semibold mb-2\">Sinopse</h2>\r\n            <p className=\"text-justify text-slate-300\">{movie.overview}</p>\r\n          </div>\r\n\r\n          {/* Elenco */}\r\n          <div>\r\n            <h2 className=\"text-2xl font-semibold mb-2 mt-8\">Elenco Principal</h2>\r\n            <div className=\"flex flex-wrap gap-4\">\r\n              {cast.length === 0 && <span className=\"text-slate-400\">Elenco não disponível.</span>}\r\n              {cast.map(actor => (\r\n                <div key={actor.id} className=\"flex flex-col items-center w-24\">\r\n                  {actor.profile_path ? (\r\n                    <img\r\n                      src={`https://image.tmdb.org/t/p/w185${actor.profile_path}`}\r\n                      alt={actor.name}\r\n                      className=\"rounded-full w-20 h-20 object-cover border-2 border-blue-300 shadow-md mb-1\"\r\n                    />\r\n                  ) : (\r\n                    <div className=\"rounded-full w-20 h-20 bg-slate-700 flex items-center justify-center text-slate-400 mb-1\">\r\n                      ?\r\n                    </div>\r\n                  )}\r\n                  <span className=\"text-xs text-center text-blue-100 font-semibold\">{actor.name}</span>\r\n                  <span className=\"text-[10px] text-center text-blue-300\">{actor.character}</span>\r\n                </div>\r\n              ))}\r\n            </div>\r\n          </div>\r\n        </div>\r\n      </div>\r\n\r\n      {trailerKey ? (\r\n        <div className=\"w-full max-w-5xl mt-12 rounded-2xl overflow-hidden shadow-2xl\">\r\n          <iframe\r\n            width=\"100%\"\r\n            height=\"500\"\r\n            src={`https://www.youtube.com/embed/${trailerKey}`}\r\n            title=\"YouTube trailer\"\r\n            frameBorder=\"0\"\r\n            allow=\"accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture\"\r\n            allowFullScreen\r\n            className=\"w-full h-[400px] md:h-[500px]\"\r\n          ></iframe>\r\n        </div>\r\n      ) : (\r\n        <p className=\"text-slate-400 text-center mt-10\">Trailer não disponível.</p>\r\n      )}\r\n    </div>\r\n  );\r\n}\r\n"],"names":[],"mappings":"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","debugId":null}}]
}